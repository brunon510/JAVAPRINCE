¬øQu√© es un bucle?
Un bucle (o loop) en JavaScript es una estructura de control que permite repetir un bloque de c√≥digo varias veces hasta que se cumpla una condici√≥n espec√≠fica.

Los bucles son muy √∫tiles cuando necesitamos realizar operaciones repetitivas como recorrer arrays, sumar valores o esperar a que una condici√≥n cambie.

üìå Tipos de bucles en JavaScript
En JavaScript existen varios tipos de bucles, cada uno con diferentes usos:

Tipo de Bucle	Caracter√≠stica Principal	Uso Com√∫n
for	Repite un bloque de c√≥digo un n√∫mero determinado de veces	Recorrer arrays o ejecutar acciones un n√∫mero de veces
while	Repite mientras una condici√≥n sea verdadera	Cuando no sabemos cu√°ntas veces se repetir√°
do...while	Igual que el while, pero ejecuta el bloque al menos una vez	Cuando queremos que el c√≥digo se ejecute al menos una vez
for...of	Recorre los valores de un objeto iterable como arrays	Recorrer arrays o strings
for...in	Recorre las propiedades enumerables de un objeto	Recorrer las claves (propiedades) de objetos

üìå Detalle de cada bucle
1. Bucle for
‚úÖ Ejecuta el bloque un n√∫mero exacto de veces.
‚úÖ Tiene tres partes: inicializaci√≥n, condici√≥n y actualizaci√≥n.

javascript
Copiar
Editar
for (let i = 0; i < 5; i++) {
  console.log("N√∫mero: " + i);
}
2. Bucle while
‚úÖ Ejecuta el bloque mientras la condici√≥n sea verdadera.
‚úÖ La condici√≥n se eval√∫a antes de cada iteraci√≥n.

javascript
Copiar
Editar
let i = 0;
while (i < 5) {
  console.log("N√∫mero: " + i);
  i++;
}
3. Bucle do...while
‚úÖ Igual que el while, pero la condici√≥n se eval√∫a despu√©s.
‚úÖ El bloque se ejecuta al menos una vez, incluso si la condici√≥n es falsa desde el principio.

javascript
Copiar
Editar
let i = 0;
do {
  console.log("N√∫mero: " + i);
  i++;
} while (i < 5);
4. Bucle for...of
‚úÖ Sirve para recorrer arrays, strings u objetos iterables.
‚úÖ En cada iteraci√≥n devuelve el valor del elemento.

javascript
Copiar
Editar
let frutas = ["Manzana", "Banana", "Pera"];
for (let fruta of frutas) {
  console.log(fruta);
}
5. Bucle for...in
‚úÖ Recorre las propiedades (claves) de un objeto.
‚úÖ Devuelve el nombre de cada propiedad.

javascript
Copiar
Editar
let persona = { nombre: "Ana", edad: 30, ciudad: "Madrid" };
for (let clave in persona) {
  console.log(clave + ": " + persona[clave]);
}
üìå Control de bucles: Sentencias break y continue
break üëâ Sale completamente del bucle.

javascript
Copiar
Editar
for (let i = 0; i < 10; i++) {
  if (i === 5) break;
  console.log(i);
}
continue üëâ Salta la iteraci√≥n actual y pasa a la siguiente.

javascript
Copiar
Editar
for (let i = 0; i < 5; i++) {
  if (i === 2) continue;
  console.log(i);
}
üìå Buenas pr√°cticas al usar bucles
‚úÖ Evitar bucles infinitos (asegurarse que la condici√≥n termine en alg√∫n momento).
‚úÖ No modificar innecesariamente la variable de control dentro del bucle.
‚úÖ Usar for...of o m√©todos como .forEach() cuando sea posible para arrays.
‚úÖ Si recorres objetos, usar for...in o m√©todos como Object.keys().

üìå Ejemplo pr√°ctico: Sumar los n√∫meros del 1 al 5
javascript
Copiar
Editar
let suma = 0;
for (let i = 1; i <= 5; i++) {
  suma += i;
}
console.log("La suma es: " + suma);
üìå Resumen Final
‚úÖ Los bucles son esenciales para realizar tareas repetitivas.
‚úÖ JavaScript ofrece distintas estructuras para distintas necesidades: for, while, do...while, for...of, for...in.
‚úÖ Saber elegir el bucle correcto mejora la legibilidad y eficiencia del c√≥digo